name: build

on:
  push:
    # Sequence of patterns matched against refs/heads
    branches:    
      # Push events on main branch
      - main

env:
  PKG_NAME: "vault"
  GO_TAGS: "ui"

jobs:
  get-product-version:
    runs-on: ubuntu-latest
    outputs:
      product-version: ${{ steps.get-product-version.outputs.product-version }}
      product-base-version: ${{ steps.get-product-version.outputs.product-base-version }}
    steps:
      - uses: actions/checkout@v2
      - name: get product version
        id: get-product-version
        run: |
          make version
          IFS="-" read BASE_VERSION _other <<< "$(make version)"
          echo "::set-output name=product-version::$(make version)"
          echo "::set-output name=product-base-version::${BASE_VERSION}"

  get-build-date:
    runs-on: ubuntu-latest
    outputs:
      build-date: ${{ steps.get-build-date.outputs.build-date }}
    steps:
      - uses: actions/checkout@v2
      - name: get build date
        id: get-build-date
        run: |
          make build-date
          echo "::set-output name=build-date::$(make build-date)"

  build-darwin:
    needs: [ get-product-version, get-build-date ]
    runs-on: macos-latest
    strategy:
      matrix:
        goos: [ darwin ]
        goarch: [ "amd64", "arm64" ]
        cgo_enabled: [1, 0]
        go: [ "1.17.9" ]
      fail-fast: true
    name: Go ${{cgo_enabled}} ${{ matrix.go }} ${{ matrix.goos }} ${{ matrix.goarch }} build
    steps:
      - uses: actions/checkout@v2

      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}
      - name: Setup node and yarn
        uses: actions/setup-node@v2
        with:
          node-version: '14'
          cache: 'yarn'
          cache-dependency-path: 'ui/yarn.lock'
      - name: UI Build
        run: |
          cd ui
          yarn install --ignore-optional
          npm rebuild node-sass
          yarn --verbose run build
          cd ..
      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GO_TAGS: "${{ env.GO_TAGS }} netcgo"
          CGO_ENABLED: ${{ matrix.cgo_enabled }}
        run: |
          mkdir dist out
          GO_TAGS="${{ env.GO_TAGS }}" VAULT_VERSION=${{ needs.get-product-version.outputs.product-base-version }} VAULT_REVISION="$(git rev-parse HEAD)" VAULT_BUILD_DATE="${{ needs.get-build-date.outputs.build-date }}" make build
          zip -r -j out/${{ env.PKG_NAME }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}_cgo-${{ matrix.cgo_enabled }}.zip dist/
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PKG_NAME }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}_cgo-${{ matrix.cgo_enabled }}.zip
          path: out/${{ env.PKG_NAME }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}_cgo-${{ matrix.cgo_enabled }}.zip
